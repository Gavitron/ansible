#!/usr/bin/env python
# -*- coding: utf-8 -*-

# (c) 2013, Jan-Piet Mens <jpmens () gmail.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#

DOCUMENTATION = '''
---
module: irc
short_description: Send a message to an IRC channel
description:
   - Send a message to an IRC channel. This is a very simplistic implementation.
options:
  server:
    description:
      - IRC server name/address
    required: false
    default: localhost
  port:
    description:
      - IRC server port number
    required: false
    default: 6667
  nick:
    description:
      - Nickname
    required: false
    default: ansible
  msg:
    description:
      - The message body.
    required: true
    default: null
  color:
    description:
      - Text color for the message. Default is black.
    required: false
    default: black
    choices: [ "yellow", "red", "green", "blue", "black" ]
  channel:
    description:
      - Channel name
    required: true

# informational: requirements for nodes
requirements: [ socket ]
author: Jan-Piet Mens
'''

EXAMPLES = '''
action: irc server=irc.example.net channel="#t1" msg="Hello world"

local_action: irc port=6669
              channel="#t1"
              msg="All finished at {{ ansible_date_time.iso8601 }}"
              color=red
              nick=ansibleIRC
'''

# ===========================================
# IRC module support methods.
#

import socket

def send_msg(channel, message, server, port, nickname="ansible"):
    '''send message to IRC'''

    # loop control vars
    loop = True
    sent = False

    # init the socket, and send username handshaking per rfc2812
    ircsock = socket.socket()
    ircsock.connect((server,int(port)))
    ircsock.send("NICK %s\r\n" % nickname)
    ircsock.send("USER %(nick)s %(nick)s %(nick)s :ansible IRC\r\n" % {'nick':nickname})

    # we re-use inbuf like this to make sure that we don't discard any partial lines.
    inbuf = '';
    while loop:
        rcvdata = inbuf + ircsock.recv(1024)
        lines = rcvdata.split("\n")
        for inbuf in lines:
            inbuf = str(inbuf).strip()

            # make sure we've got a complete line:
            if inbuf == '':
                continue
            args = inbuf.split(None, 3)
            if len(args) != 4:
                continue

            # per rfc, svr MUST send 001 upon succ. registration, so now we can join.
            if args[1] == "001":
                ircsock.send("JOIN %s\r\n" % channel)

            # ANY message from the newly joined channel means we made it in
            elif args[3].lower().startswith(channel.lower()):
                # only send the message once
                if not sent:
                    ircsock.send("PRIVMSG %s :%s\r\n" % (channel, message) )
                    # since PRIVMSG gets no reply, we do ISON to force a response.
                    ircsock.send("ISON %s\r\n" % nickname)
                    sent = True

            # 303 = RPL_ISON.  our PM sent, so logout.
            elif args[1] == "303":
                ircsock.send("PART %s\r\n" % channel)
                ircsock.send("QUIT\r\n")
                ircsock.shutdown(socket.SHUT_RDWR)
                ircsock.close()
                loop=False
            else:
                continue

# ===========================================
# Main
#

def main():

    module = AnsibleModule(
        argument_spec=dict(
            server = dict(default='localhost'),
            port = dict(default = 6667),
            nick = dict(default = 'ansible'),
            msg = dict(required = True),
            color = dict(default="black", choices=["yellow", "red", "green",
                                                  "blue", "black"]),
            channel = dict(required = True)
        ),
        supports_check_mode=True
    )

    server  = module.params["server"]
    port    = module.params["port"]
    nick    = module.params["nick"]
    msg     = module.params["msg"]
    color   = module.params["color"]
    channel = module.params["channel"]

    try:
        send_msg(channel, msg, server, port, nick)
    except Exception, e:
        module.fail_json(msg="unable to send to IRC: %s" % e)

    module.exit_json(changed=False, channel=channel, nick=nick, msg=msg )

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()



